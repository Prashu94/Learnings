Injecting a SlayDragonQuest into a BraveKnight	with Spring
-------------------------------------------------------------

<?xml version ="1.0" encoding = "UTF-8"?>
<beans xmlns = "http://www.springframework.org/schema/beans"
	xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation = "http://www.springframework.org/schema.beans
	http:/www.springframework.org/schema/beans/spring-beans.xsd">
<bean id = "knight" class = "com.springaction.knights.BraveKnight">
	<constructor-arg ref ="quest"/> --//injecting quest
</bean>

<bean id = "quest" class = "com.springaction.knights.SlayDragonQuest">
	<constructor-arg value ="#(T(System).out) />
</bean>-- //Create SlayDragonQuest

</beans>

Here BraveKnight and SlayDragonQuest are decalred as beans in Spring.

In the caseof BraveKnight bean,it's constructed passing a reference to the SlayDragonQuest bean as Constructor argument
While the SlayDragonQuest bean uses the Spring Expression Language to pass System.out (which is PrinStream) to SlayDragonQuest's constructor

Java Based configuration as an alternative to XML
----------------------------------------------------------

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import com.springinaction.knights.BraveKnight;
import com.springinaction.knights.Knight;
import com.springinaction.knights.Quest;
import com.springinaction.knights.SlayDragonQuest;
	@Configuration
	public class KnightConfig {
	@Bean
	public Knight knight() {
		return new BraveKnight(quest());
	}
	@Bean
	public Quest quest() {
		return new SlayDragonQuest(System.out);
	}
}


How it works
---------------------------------------------------------------
In a spring application, an application context loads bean definitons and wires them together.

The spring application context is fully responsible for the creation of and wiring of the objects that make up the application.

When the beans in the knight.xml are declared in an XML file, an appropriate choice of application context migth be ClassPathXmlApplicationContext.

This Spring
context implementation loads the Spring context from one or more XML files located
in the application’s classpath. The main() method in the following listing uses Class-
PathXmlApplicationContext to load knights.xml and to get a reference to the Knight
object.

KnightMain.java loads the Spring Context containing a Knight
------------------------------------------------------------------

package com.springinaction.knights;
import org.springframework.context.support.
ClassPathXmlApplicationContext;
public class KnightMain {
public static void main(String[] args) throws Exception {
ClassPathXmlApplicationContext context = //Load Spring context
new ClassPathXmlApplicationContext(
"META-INF/spring/knight.xml");
Knight knight = context.getBean(Knight.class);//Get Knight Bean
knight.embarkOnQuest();//Use Knight
context.close();
}
}

